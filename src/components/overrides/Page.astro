---
import Default from "@astrojs/starlight/components/Page.astro";

import { generateDescription, generateTableOfContents } from "~/util/props";
import { getSidebar, flattenSidebar } from "~/util/sidebar";

const props = Astro.locals.starlightRoute;
const data = props.entry.data;

const html = await Astro.slots.render("default");

if (props.toc) {
	props.toc.items = await generateTableOfContents(html);
}

if (props.hasSidebar) {
	const group = await getSidebar(Astro);
	props.sidebar = group.entries;

	if (props.pagination) {
		const flattened = flattenSidebar(props.sidebar);

		const idx = flattened.findIndex((entry) => entry.isCurrent);

		let prev = flattened[idx - 1];
		let next = flattened[idx + 1];

		if (prev?.attrs["data-group-label"]) {
			prev = {
				...prev,
				label: prev.attrs["data-group-label"],
			};
		}

		if (next?.attrs["data-group-label"]) {
			next = {
				...next,
				label: next.attrs["data-group-label"],
			};
		}

		if (data.prev !== false) {
			props.pagination.prev = prev;
		}

		if (data.next !== false) {
			props.pagination.next = next;
		}
	}
}

if (data.description) {
	data.description = await generateDescription({
		markdown: data.description,
	});
} else {
	data.description = await generateDescription({ html });
}

if (data.updated) {
	data.lastUpdated = undefined;
}
---

<Default set:html={html} />

<style>
	html:not([data-has-toc]) {
		--sl-content-width: 67.5rem;
	}
</style>
